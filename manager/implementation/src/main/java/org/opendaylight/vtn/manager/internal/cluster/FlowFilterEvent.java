/*
 * Copyright (c) 2014, 2015 NEC Corporation.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.vtn.manager.internal.cluster;

import org.slf4j.Logger;

import org.opendaylight.vtn.manager.VTenantPath;

import org.opendaylight.vtn.manager.internal.VTNManagerImpl;

import org.opendaylight.controller.sal.core.UpdateType;

/**
 * {@code FlowFilterEvent} describes an cluster event object which notifies
 * that a flow filter was added, changed, or removed.
 *
 * <p>
 *   Although this class is public to other packages, this class does not
 *   provide any API. Applications other than VTN Manager must not use this
 *   class.
 * </p>
 */
public final class FlowFilterEvent extends ClusterEvent {
    /**
     * Version number for serialization.
     */
    private static final long serialVersionUID = -5671478627691461404L;

    /**
     * Path to the virtual node that contains the flow filter.
     */
    private final VTenantPath  nodePath;

    /**
     * Flow direction to be evaluated.
     *
     * {@code true} means that the flow filter is applied to outgoing flow.
     */
    private final boolean  output;

    /**
     * The index number of the flow filter.
     */
    private final int  index;

    /**
     * Update type of this event.
     */
    private final UpdateType  updateType;

    /**
     * Generate a flow filter event which indicates that the flow filter was
     * added, removed, or changed.
     *
     * @param mgr    VTN Manager service.
     * @param path   Path to the virtual node that contains the flow filter.
     * @param out    {@code true} means that the flow filter for outgoing flow.
     *               {@code false} means that the flow filter for incoming
     *               flow.
     * @param idx    The index of the VTN path map.
     * @param type   Update type.
     */
    public static void raise(VTNManagerImpl mgr, VTenantPath path, boolean out,
                             int idx, UpdateType type) {
        mgr.enqueueEvent(new FlowFilterEvent(path, out, idx, type));
    }

    /**
     * Construct a new flow filter event.
     *
     * @param path   Path to the virtual node that contains the flow filter.
     * @param out    {@code true} means that the flow filter for outgoing flow.
     *               {@code false} means that the flow filter for incoming
     *               flow.
     * @param idx    The index of the VTN path map.
     * @param type   Update type.
     */
    private FlowFilterEvent(VTenantPath path, boolean out, int idx,
                            UpdateType type) {
        nodePath = path;
        output = out;
        index = idx;
        updateType = type;
    }

    /**
     * Return the path to the virtual node that contains the flow filter.
     *
     * @return  The path to the virtual node.
     */
    public VTenantPath getPath() {
        return nodePath;
    }

    /**
     * Return the index of the flow filter.
     *
     * @return  The index of the flow filter.
     */
    public int getIndex() {
        return index;
    }

    /**
     * Determine the flow direction for the flow filter.
     *
     * @return  {@code true} is returned if the flow filter is applied to
     *          outgoing flow. Otherwise {@code false} is returned.
     */
    public boolean isOutput() {
        return output;
    }

    /**
     * Return update type of this event.
     *
     * @return  Update type.
     */
    public UpdateType getUpdateType() {
        return updateType;
    }

    /**
     * Invoked when a cluster event has been received.
     *
     * @param mgr    VTN Manager service.
     * @param local  {@code true} if this event is generated by the local node.
     */
    @Override
    protected void eventReceived(VTNManagerImpl mgr, boolean local) {
        if (!local) {
            FlowFilterMap.eventReceived(mgr, this);
        }
    }

    /**
     * Record a trace log which indicates that a cluster event has been
     * received from remote node.
     *
     * @param mgr     VTN Manager service.
     * @param logger  A logger instance.
     * @param key     A cluster event key associated with this event.
     */
    @Override
    public void traceLog(VTNManagerImpl mgr, Logger logger,
                         ClusterEventId key) {
        logger.trace("{}:{}: Received flow filter event: " +
                     "path={}, output={}, index={}, type={}",
                     mgr.getContainerName(), key, nodePath, output, index,
                     updateType);
    }

    /**
     * Determine whether this event should be delivered on the VTN task thread
     * or not.
     *
     * @param local  {@code true} if this event is generated by the local node.
     *               {@code false} if this event is generated by remote cluster
     *               node.
     * @return  {@code true} is returned if this event should be delivered
     *          on the VTN task thread. Otherwise {@code false} is returned.
     */
    @Override
    public boolean isSingleThreaded(boolean local) {
        return true;
    }
}
