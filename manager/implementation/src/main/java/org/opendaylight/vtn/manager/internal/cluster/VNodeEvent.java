/*
 * Copyright (c) 2013, 2015 NEC Corporation.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.vtn.manager.internal.cluster;

import java.io.Serializable;

import org.slf4j.Logger;

import org.opendaylight.vtn.manager.VTenantPath;
import org.opendaylight.vtn.manager.internal.VTNManagerImpl;

import org.opendaylight.controller.sal.core.UpdateType;

/**
 * Base class of cluster events which notifies that a virtual node was
 * changed.
 *
 * <p>
 *   Although this class is public to other packages, this class does not
 *   provide any API. Applications other than VTN Manager must not use this
 *   class.
 * </p>
 */
public abstract class VNodeEvent extends ClusterEvent {
    /**
     * Version number for serialization.
     */
    private static final long serialVersionUID = -2748094766955786808L;

    /**
     * Path to the virtual node.
     */
    private final VTenantPath  path;

    /**
     * An optional object to be delivered with this event.
     */
    private final Serializable  object;

    /**
     * Update type of this event.
     */
    private final UpdateType  updateType;

    /**
     * Determine whether the tenant configuration should be saved or not.
     */
    private final boolean  saveConfig;

    /**
     * Construct a new virtual node event.
     *
     * @param path  Path to the virtual node.
     * @param obj   An optional object.
     * @param type  Update type.
     * @param save  {@code true} means that the tenant configuration should
     *              be saved.
     */
    protected VNodeEvent(VTenantPath path, Serializable obj, UpdateType type,
                         boolean save) {
        this.path = path;
        object = obj;
        updateType = type;
        saveConfig = save;
    }

    /**
     * Return path to the virtual node relevant to this event.
     *
     * @return  Path to the virtual node.
     */
    public VTenantPath getPath() {
        return path;
    }

    /**
     * Return an optional object.
     *
     * @return  An optional object in this event.
     */
    public Serializable getObject() {
        return object;
    }

    /**
     * Return update type of this event.
     *
     * @return  Update type.
     */
    public UpdateType getUpdateType() {
        return updateType;
    }

    /**
     * Determine whether the tenant configuration should be saved or not.
     *
     * @return  {@code true} is returned if the tenant configuration should be
     *          saved. Otherwise {@code false} is returned.
     */
    public boolean isSaveConfig() {
        return saveConfig;
    }

    /**
     * Invoked when a cluster event has been received.
     *
     * @param mgr    VTN Manager service.
     * @param local  {@code true} if this event is generated by the local node.
     */
    @Override
    protected void eventReceived(VTNManagerImpl mgr, boolean local) {
        if (!local && saveConfig) {
            // Save the tenant configuration specified by the tenant name.
            String tenantName = path.getTenantName();
            mgr.saveTenantConfig(tenantName);
        }

        // Deliver this event to listeners.
        notifyEvent(mgr);
    }

    /**
     * Record a trace log which indicates that a cluster event has been
     * received from remote node.
     *
     * @param mgr     VTN Manager service.
     * @param logger  A logger instance.
     * @param key     A cluster event key associated with this event.
     */
    @Override
    public void traceLog(VTNManagerImpl mgr, Logger logger,
                         ClusterEventId key) {
        logger.trace("{}:{}: {}: Received {} event: type={}, data={}",
                     mgr.getContainerName(), path, key, getTypeName(),
                     updateType, object);
    }

    /**
     * Determine whether this event should be delivered on the VTN task thread
     * or not.
     *
     * @param local  {@code true} if this event is generated by the local node.
     *               {@code false} if this event is generated by remote cluster
     *               node.
     * @return  {@code true} is returned if this event should be delivered
     *          on the VTN task thread. Otherwise {@code false} is returned.
     */
    @Override
    public boolean isSingleThreaded(boolean local) {
        return true;
    }

    /**
     * Return the name of node type.
     *
     * @return  A string which describes the type of this virtual node.
     */
    public abstract String getTypeName();

    /**
     * Deliver this event to {@code IVTNManagerAware} listeners.
     *
     * @param mgr  VTN Manager service.
     */
    public abstract void notifyEvent(VTNManagerImpl mgr);
}
